:- module(proylcc,
    [
        put/8
    ]).

:-use_module(library(lists)).


%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% replace(?X, +XIndex, +Y, +Xs, -XsY)
%
% XsY is the result of replacing the occurrence of X in the XIndex position of Xs with Y.

replace(X, 0, Y, [X|Xs], [Y|Xs]).

replace(X, XIndex, Y, [Xi|Xs], [Xi|XsY]):-
    XIndex > 0,
    XIndexS is XIndex - 1,
    replace(X, XIndexS, Y, Xs, XsY).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% get_col(+Index, +Matrix, -Col)
%
% Col is the resulting list of pushing all the values in the Index position of the rows of Matrix into a list.

getCol(_, [], []).
getCol(N, [G|Gs], [Elem|Col]):-
    nth0(N, G, Elem),
    getCol(N, Gs, Col).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% transform_row_to_clues(+Row, -Clues)
%
% Clues is a list of numbers representing the amount of consecutive "#" found in Row (a list of moves).
% If Row is [#,#,#,_,#], then Clues is [3,1]
% If Row is [#,#], then Clues is [2]

countPound([], [], 0).

countPound([L|Ls], Ls, 0):-
    L \== "#".

countPound([L|Ls], Rest, Cont):-
    L == "#",
    countPound(Ls, Rest, CAux),
    Cont is CAux + 1.

parsedRow([],[]).

parsedRow([L|Ls],Rta):-
    L \== "#",
    parsedRow(Ls,Rta).

parsedRow([L|Ls],[Cont|Rta]):-
    L == "#",
    countPound([L|Ls], Rest, Cont),
    parsedRow(Rest,Rta).

sat([0],[],1).

sat([X|Xs],[X|Xs],1).

sat([_|_],[],0).

sat([X|Xs],[Y|Ys],0):-
    [X|Xs] \== [Y|Ys].

check_clues(GridRow, RowClues, Satisfied):-
    parsedRow(GridRow, ParsedRow),
    sat(RowClues, ParsedRow, Satisfied).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%
% put(+Move, +Pos, +RowClues, +ColClues, +Grid, -NewGrid, -RowSatisfied, -ColSatisfied).
%

put(Move, [RowN, ColN], RowClues, ColClues, Grid, NewGrid, RowSatisfied, ColSatisfied):-

    % NewGrid is the result of replacing Row in the RowN position of Grid with NewRow.
    replace(Row, RowN, NewRow, Grid, NewGrid),

    % NewRow is the result of replacing Cell in the ColN position of Row with _ as long as Cell coincides with Move (Cell is instanced on replace/5).
    % Otherwise (;)
    % NewRow is the result of replacing whatever there is (_Cell) in the ColN position of Row with Move.
    (
        replace(Cell, ColN, _, Row, NewRow),
        Cell == Move
        ;
        replace(_Cell, ColN, Move, Row, NewRow)
    ),

    check_clues(NewRow, RowClues, RowSatisfied),

    getCol(ColN, NewGrid, NewCol),

    check_clues(NewCol, ColClues, ColSatisfied).